services:
  reservations:
    build:
      context: .
      dockerfile: ./apps/reservations/Dockerfile
      target: development
    command: pnpm run start:dev reservations
    env_file:
      - ./apps/reservations/.env
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
  notifications:
    build:
      context: .
      dockerfile: ./apps/notifications/Dockerfile
      target: development
    command: pnpm run start:dev notifications
    env_file:
      - ./apps/notifications/.env
    ports:
      - '3001:3001'
    volumes:
      - .:/usr/src/app
  mongo:
    image: mongo
    ports:
      - "27018:27017"
    restart: always
    # command: mongod --replSet my-mongo-set
  rabbitmq:
    image: rabbitmq
    ports:
      - 5672:5672
  # mongoinit:
  #   image: mongo
  #   # this container will exit after executing the command
  #   restart: "no"
  #   depends_on:
  #     - mongo
  #   command: >
  #     mongo --host mongo:27017 --eval 
  #     '
  #     db = (new Mongo("localhost:27017")).getDB("test");
  #     config = {
  #     "_id" : "my-mongo-set",
  #     "members" : [
  #       {
  #         "_id" : 0,
  #         "host" : "mongo:27017"
  #       }
  #     ]
  #     };
  #     rs.initiate(config);
  #     '     
